---
- name: vnet Debian Linux Setup
  hosts: all

  vars:
    sn: 42  # default vnet subnet (192.168.42.255)

  tasks:

    - name: check if this is a vm
      ansible.builtin.command: systemd-detect-virt --quiet
      register: virt_check
      ignore_errors: yes
      changed_when: false
      failed_when: false

    - name: use sn 46 (192.168.46.255) if this is a vm
      set_fact:
        sn: 46
      when: virt_check.rc == 0

    - name: Get all IPv4 addresses except on vnet0
      shell: |
        ip -4 addr show | grep -v 'vnet0' | grep -oP '(?<=inet\s)\d+(\.\d+){3}'
      register: ip_output
      changed_when: false

    - name: Check if any IP is in 192.168.42.0/24 subnet
      set_fact:
        ip_in_subnet: "{{ ip_output.stdout_lines | select('search', '^192\\.168\\.42\\.') | list | length > 0 }}"
      changed_when: false

    - name: Set sn to 46 if an IP from the subnet is found
      set_fact:
        sn: 46
      when: ip_in_subnet | default(false)
      changed_when: false


    - name: Packages for vnet0
      apt:
        name:
          - bridge-utils
          - ufw
          - dnsmasq
          - ifupdown
        update_cache: no
        install_recommends: no

    - name: 'remove dnsmasq from startup'
      command: systemctl disable dnsmasq
      args:
        removes: /etc/systemd/system/multi-user.target.wants/dnsmasq.service

    - name: 'stop dnsmasq'
      command: systemctl stop dnsmasq
      args:
        removes: /run/dnsmasq/dnsmasq.pid

    - name: V bridge
      blockinfile:
        path: /etc/network/interfaces.d/vnet0
        create: yes
        mode: "0444"
        owner: root
        group: root
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        block: |
          auto vnet0
          iface vnet0 inet static
            bridge_ports none
            address 192.168.{{ sn }}.1
            broadcast 192.168.{{ sn }}.255
            netmask 255.255.255.0
      notify:
      - Restart vnet0

    - name: start vnet0 if not exists
      ansible.builtin.command: ifup vnet0
      args:
        creates: /proc/sys/net/ipv6/conf/vnet0/disable_ipv6

    - name: create /etc/pipewire/pipewire-pulse.conf.d
      ansible.builtin.file:
        path: /etc/pipewire/pipewire-pulse.conf.d
        state: directory
        mode: '0755'

    - name: pipewire listen on tcp:4656
      ansible.builtin.copy:
        dest: /etc/pipewire/pipewire-pulse.conf.d/99-server-tcp.conf
        content: |
          pulse.properties = {
              server.address = [
                  "unix:native"
                  "tcp:4656"
              ]
          }
        owner: root
        group: root
        mode: '0644'

    - ansible.posix.sysctl:
        name: net.ipv6.conf.vnet0.disable_ipv6
        value: '1'
        state: present

    - ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present

    - name: ufw firewall rules for routing to the Internet
      blockinfile:
        path: /etc/ufw/before.rules
        create: yes
        mode: "0440"
        owner: root
        group: root
        marker: "# {mark} ANSIBLE MANAGED BLOCK for vnet0"
        insertbefore: BOF
        block: |
          *nat
          #:POSTROUTING ACCEPT - [0:0]
          :POSTROUTING ACCEPT
          # Route network 192.168.{{ sn }}.0/24 (vnet0)
          -A POSTROUTING -s 192.168.{{ sn }}.0/24 -j MASQUERADE
          COMMIT
      notify:
      - Restart ufw


    - name: Allow Routing
      community.general.ufw:
        rule: allow
        route: yes
        interface_in: vnet0
  
    - name: Allow all access to tcp port 53/udp (dns)
      community.general.ufw:
        rule: allow
        port: '53'
        proto: udp
        interface: vnet0
        direction: in

    - name: Allow access to dhcp server
      community.general.ufw:
        rule: allow
        port: '67'
        proto: udp
        interface: vnet0
        direction: in

    - name: Allow access to NTP server
      community.general.ufw:
        rule: allow
        port: '123'
        proto: udp
        interface: vnet0
        direction: in

    - name: Allow access to tor
      community.general.ufw:
        rule: allow
        port: '9040'
        proto: tcp
        interface: vnet0
        direction: in

    - name: Allow sending audio to pipewire (4656)
      community.general.ufw:
        rule: allow
        direction: in
        interface: vnet0
        port: 4656
        proto: tcp

    - name: dnsmasq DNS and DHCP for vnet0
      blockinfile:
        path: /etc/dnsmasq-vnet0.conf
        create: yes
        mode: "0444"
        owner: root
        group: root
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        block: |
          port=53
          interface=vnet0
          listen-address=192.168.{{ sn }}.1
          bind-interfaces
          except-interface=lo
          domain-needed
          bogus-priv
          server=127.0.0.53
          dhcp-range=192.168.{{ sn }}.100,192.168.{{ sn }}.200,255.255.255.0,12h
          dhcp-option=option:ntp-server,192.168.{{ sn }}.1
          log-queries
          log-dhcp
      notify:
      - Restart dnsmasq-vnet0

    - name: dnsmasq DNS and DHCP for vnet0 systemd
      blockinfile:
        path: /etc/systemd/system/dnsmasq-vnet0.service
        create: yes
        mode: "0444"
        owner: root
        group: root
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        block: |
          [Unit]
          Description=dnsmasq vnet0 DNS and DHCP
          After=network.target
            
          [Service]
          Type=forking
          ExecStart=/usr/sbin/dnsmasq -x /run/dnsmasq/dnsmasq-vnet0.pid -u dnsmasq -r /run/dnsmasq/resolv.conf -C /etc/dnsmasq-vnet0.conf --local-service
          PIDFile=/run/dnsmasq/dnsmasq-vnet0.pid
          KillMode=process
          Restart=on-failure
          
          [Install]
          WantedBy=multi-user.target
      notify:
      - Restart dnsmasq-vnet0

    - name: 'add dnsmasq-vnet0 to startup'
      command: systemctl enable dnsmasq-vnet0
      args:
        creates: /etc/systemd/system/multi-user.target.wants/dnsmasq-vnet0.service

    - name: 'start dnsmasq-vnet0'
      command: systemctl start dnsmasq-vnet0
      args:
        creates: /run/dnsmasq/dnsmasq-vnet0.pid

  handlers:

    - name: Restart vnet0
      ansible.builtin.shell: ifup vnet0

    - name: Restart dnsmasq-vnet0
      service:
        name: dnsmasq-vnet0
        state: restarted

    - name: Restart ufw
      service:
        name: ufw
        state: restarted

